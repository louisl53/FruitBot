# Importing necessary libraries 
from dotenv import load_dotenv
from openai import OpenAI
import os

# Loading environment variables from .env file
load_dotenv()
OPENAI_KEY = os.getenv("OPENAI_KEY")
client = OpenAI(api_key=OPENAI_KEY)

# Agent 1

def gpt_intention(text_message):
    # Define a system message that guides the language model's behavior.
    syst = f""" 
    You need to understand the intention of the message.
    If the person wants to make a recipe, send only "recipe".
    If the person talks about something else, send only "chat".
    """
    
    # Making an API call to OpenAI's GPT-3.5-turbo model with the system message and user's text.
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": syst},
            {"role": "user", "content": text_message}, 
        ]
    )
    
    # Extracting the content from the model's response.
    answer = response.choices[0].message.content

    # Returning the intent ("recipe" or "chat") as interpreted by the model.
    return answer

# Agent 2 function for generating context-sensitive responses based on fruit prediction.
def gpt_yes_no(prediction):

    # System message that guides the model on how to respond based on the fruit condition.
    syst = """
    You are FruitsBot, an intelligent assistant specialized in fruit management.
    You will receive fruit classifications (Rotten or Healthy) predicted by a PyTorch algorithm.
    The user has sent an image of their fruit, and you receive the prediction to formulate a response.
    - Be polite and use emojis in your responses.
    - If the fruit is good (Healthy), ask the user if they would like to make a recipe with this fruit.  
    - If the fruit is bad (Rotten), ask the user if they had planned to make a recipe with this fruit. 
    """

    # Calling the GPT-3.5-turbo model to generate a response based on the prediction.
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": syst},
            {"role": "user", "content": prediction}, 
        ]
    )

    # Retrieving the generated text from the model's response.
    answer = response.choices[0].message.content

    # Returning the formulated response for the given fruit condition.
    return answer


# Agent 3

def gpt_question(prediction):
    # System guidance for generating a recipe or inquiring about user's intentions based on fruit condition.
    syst = """
    You are FruitsBot, an intelligent assistant specialized in suggesting recipes using fruits.
    - If the selected fruit is in good condition, suggest a recipe idea using that fruit.
    - If the fruit is in bad condition, ask the user what recipe they had planned to make with that fruit. Just ask the question without saying anything else.
    """

    # API call to the GPT-3.5-turbo model with the specific context and prediction.
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": syst},
            {"role": "user", "content": prediction}, 
        ]
    )

    # Extracting the response generated by the model.
    answer = response.choices[0].message.content

    # Returning the answer which could be a recipe suggestion or a question about user's recipe plans.
    return answer

# Agent 4 function for suggesting recipes based on fruit predictions and user requests.
def gpt_recipe(recipe, prediction):
    # System message that instructs the AI on how to respond based on fruit condition and user's recipe question.
    syst = f"""
    You are FruitsBot, an intelligent assistant specialized in managing fruits and vegetables.
    You will receive instructions to make a recipe.
    Here is also a prediction: {prediction} which was made from an image sent by the user of their fruit.
    - If {prediction} == no_class, then suggest a recipe based on the user's request.
    - If {prediction} is a rotten fruit, it means that the user had planned to make the recipe with this fruit: {prediction}. Therefore, suggest an alternative with other fruits. the recipe should not be too long as it will be given through a chatbot.
    - If {prediction} is a healthy fruit, don't necessarily take it into account if the user doesn't ask to use it in their recipe.
    """

    # Calling the GPT-4 model to handle the complex logic provided in the system message.
    response = client.chat.completions.create(
        model="gpt-4o",
        max_tokens= 1000,
        messages=[
            {"role": "system", "content": syst},
            {"role": "user", "content": recipe}, 
        ]
    )
    
    # Retrieving and returning the generated response based on the input recipe and prediction.
    answer = response.choices[0].message.content

    return answer

# Agent 5 function to generate conversational responses for general inquiries.
def chat_gpt(text_message):
    # System message providing context to the model for how to interact in general conversation.
    syst = f"""
    You are FruitsBot, an intelligent assistant specialized in managing fruits and vegetables. Respond politely with emojis 
    to the user. You also know how to suggest recipes. You can also analyze the freshness of fruits and vegetables from images
    (an API will be there to help you do this). If the user doesn't say hello in his question, don't say hello.
    """
    
    # Generating a response to the user's message using GPT-3.5-turbo.
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": syst},
            {"role": "user", "content": text_message}, 
        ]
    )
    
    # Extracting and returning the model's response to the user's text.
    answer = response.choices[0].message.content

    return answer

